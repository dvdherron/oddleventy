(window.webpackJsonp = window.webpackJsonp || []).push([
  [2],
  {
    '+3Jt'(e, n, t) {
      'use strict';
      t.r(n),
        function(e) {
          t('AzGU'), t('dYcP'), t('5KAr');
          const n = t('YEG7');
          const a = t.n(n);
          const i = t('t3mS');
          e(() => {
            (window.$ = e), a.a.initHighlighting(), i.c(), i.a(), i.b();
          });
        }.call(this, t('26+0'));
    },
    '5KAr'(e, n, t) {
      let a, i, r;
      (i = this),
        (r = window.srcDoc),
        void 0 ===
          (a = function(e) {
            !(function(e, n) {
              let t, a, i;
              const r = Boolean('srcdoc' in document.createElement('iframe'));
              const s =
                'Polyfill may not function in the presence of the `sandbox` attribute. Consider using the `force` option.';
              const o = /\ballow-same-origin\b/;
              const l = function(e, n) {
                const t = e.getAttribute('sandbox');
                typeof t !== 'string' ||
                  o.test(t) ||
                  (n && n.force
                    ? e.removeAttribute('sandbox')
                    : (n && !1 === n.force) ||
                      (i(s), e.setAttribute('data-srcdoc-polyfill', s)));
              };
              const c = {
                compliant(e, n, t) {
                  n && (l(e, t), e.setAttribute('srcdoc', n));
                },
                legacy(e, n, t) {
                  let a;
                  e &&
                    e.getAttribute &&
                    (n
                      ? e.setAttribute('srcdoc', n)
                      : (n = e.getAttribute('srcdoc')),
                    n &&
                      (l(e, t),
                      (a =
                        "javascript: window.frameElement.getAttribute('srcdoc');"),
                      e.contentWindow && (e.contentWindow.location = a),
                      e.setAttribute('src', a)));
                },
              };
              const d = e;
              if (
                ((i =
                  window.console && window.console.error
                    ? function(e) {
                        window.console.error(`[srcdoc-polyfill] ${e}`);
                      }
                    : function() {}),
                (d.set = c.compliant),
                (d.noConflict = function() {
                  return (window.srcDoc = n), d;
                }),
                !r)
              ) {
                for (
                  d.set = c.legacy,
                    a = document.getElementsByTagName('iframe'),
                    t = a.length;
                  t--;

                ) {
                  d.set(a[t]);
                }
              }
            })(e, r),
              (i.srcDoc = e);
          }.apply(n, [n])) || (e.exports = a);
    },
    AzGU(e, n) {
      /* ! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. MIT license */
      window.matchMedia ||
        (window.matchMedia = (function() {
          'use strict';
          let e = window.styleMedia || window.media;
          if (!e) {
            let n;
            const t = document.createElement('style');
            const a = document.getElementsByTagName('script')[0];
            (t.type = 'text/css'),
              (t.id = 'matchmediajs-test'),
              a
                ? a.parentNode.insertBefore(t, a)
                : document.head.appendChild(t),
              (n =
                ('getComputedStyle' in window &&
                  window.getComputedStyle(t, null)) ||
                t.currentStyle),
              (e = {
                matchMedium(e) {
                  const a = `@media ${e}{ #matchmediajs-test { width: 1px; } }`;
                  return (
                    t.styleSheet
                      ? (t.styleSheet.cssText = a)
                      : (t.textContent = a),
                    n.width === '1px'
                  );
                },
              });
          }
          return function(n) {
            return { matches: e.matchMedium(n || 'all'), media: n || 'all' };
          };
        })());
    },
    YEG7(e, n, t) {
      /* ! highlight.js v9.13.1 | BSD3 License | git.io/hljslicense */
      /* ! generated with command:
      node tools/build.js -n -t browser bash css xml django javascript json markdown scss shell ruby yaml
*/
      !(function(e) {
        (typeof window === 'object' && window) ||
          (typeof self === 'object' && self);
        (function(e) {
          const n = [];
          const t = Object.keys;
          const a = {};
          const i = {};
          const r = /^(no-?highlight|plain|text)$/i;
          const s = /\blang(?:uage)?-([\w-]+)\b/i;
          const o = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;
          const l = '</span>';
          let c = {
            classPrefix: 'hljs-',
            tabReplace: null,
            useBR: !1,
            languages: void 0,
          };
          function d(e) {
            return e
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');
          }
          function g(e) {
            return e.nodeName.toLowerCase();
          }
          function u(e, n) {
            const t = e && e.exec(n);
            return t && t.index === 0;
          }
          function m(e) {
            return r.test(e);
          }
          function b(e) {
            let n;
            const t = {};
            const a = Array.prototype.slice.call(arguments, 1);
            for (n in e) {
              t[n] = e[n];
            }
            return (
              a.forEach((e) => {
                for (n in e) {
                  t[n] = e[n];
                }
              }),
              t
            );
          }
          function f(e) {
            const n = [];
            return (
              (function e(t, a) {
                for (let i = t.firstChild; i; i = i.nextSibling) {
                  i.nodeType === 3
                    ? (a = a + i.nodeValue.length)
                    : i.nodeType === 1 &&
                      (n.push({ event: 'start', offset: a, node: i }),
                      (a = e(i, a)),
                      g(i).match(/br|hr|img|input/) ||
                        n.push({ event: 'stop', offset: a, node: i }));
                }
                return a;
              })(e, 0),
              n
            );
          }
          function p(e) {
            function n(e) {
              return (e && e.source) || e;
            }
            function a(t, a) {
              return new RegExp(
                n(t),
                `m${e.case_insensitive ? 'i' : ''}${a ? 'g' : ''}`,
              );
            }
            !(function i(r, s) {
              if (r.compiled) {
                return;
              }
              r.compiled = !0;
              r.keywords = r.keywords || r.beginKeywords;
              if (r.keywords) {
                const o = {};
                const l = function(n, t) {
                  e.case_insensitive && (t = t.toLowerCase()),
                    t.split(' ').forEach((e) => {
                      const t = e.split('|');
                      o[t[0]] = [n, t[1] ? Number(t[1]) : 1];
                    });
                };
                typeof r.keywords === 'string'
                  ? l('keyword', r.keywords)
                  : t(r.keywords).forEach((e) => {
                      l(e, r.keywords[e]);
                    }),
                  (r.keywords = o);
              }
              r.lexemesRe = a(r.lexemes || /\w+/, !0);
              s &&
                (r.beginKeywords &&
                  (r.begin = `\\b(${r.beginKeywords.split(' ').join('|')})\\b`),
                r.begin || (r.begin = /\B|\b/),
                (r.beginRe = a(r.begin)),
                r.endSameAsBegin && (r.end = r.begin),
                r.end || r.endsWithParent || (r.end = /\B|\b/),
                r.end && (r.endRe = a(r.end)),
                (r.terminator_end = n(r.end) || ''),
                r.endsWithParent &&
                  s.terminator_end &&
                  (r.terminator_end =
                    r.terminator_end +
                    ((r.end ? '|' : '') + s.terminator_end)));
              r.illegal && (r.illegalRe = a(r.illegal));
              r.relevance == null && (r.relevance = 1);
              r.contains || (r.contains = []);
              r.contains = Array.prototype.concat.apply(
                [],
                r.contains.map((e) =>
                  (function(e) {
                    e.variants &&
                      !e.cached_variants &&
                      (e.cached_variants = e.variants.map((n) =>
                        b(e, { variants: null }, n),
                      ));
                    return (
                      e.cached_variants || (e.endsWithParent && [b(e)]) || [e]
                    );
                  })(e === 'self' ? r : e),
                ),
              );
              r.contains.forEach((e) => {
                i(e, r);
              });
              r.starts && i(r.starts, s);
              const c = r.contains
                .map((e) =>
                  e.beginKeywords ? `\\.?(${e.begin})\\.?` : e.begin,
                )
                .concat([r.terminator_end, r.illegal])
                .map(n)
                .filter(Boolean);
              r.terminators = c.length
                ? a(c.join('|'), !0)
                : {
                    exec() {
                      return null;
                    },
                  };
            })(e);
          }
          function h(e, n, t, i) {
            function r(e, n) {
              const t = b.case_insensitive ? n[0].toLowerCase() : n[0];
              return e.keywords.hasOwnProperty(t) && e.keywords[t];
            }
            function s(e, n, t, a) {
              const i = a ? '' : c.classPrefix;
              let r = `<span class="${i}`;
              const s = t ? '' : l;
              return (r = `${r}${e}">`) + n + s;
            }
            function o() {
              (v =
                v +
                (w.subLanguage != null
                  ? (function() {
                      const e = typeof w.subLanguage === 'string';
                      if (e && !a[w.subLanguage]) {
                        return d(y);
                      }
                      const n = e
                        ? h(w.subLanguage, y, !0, _[w.subLanguage])
                        : E(y, w.subLanguage.length ? w.subLanguage : void 0);
                      w.relevance > 0 && (x = x + n.relevance);
                      e && (_[w.subLanguage] = n.top);
                      return s(n.language, n.value, !1, !0);
                    })()
                  : (function() {
                      let e, n, t, a;
                      if (!w.keywords) {
                        return d(y);
                      }
                      (a = ''),
                        (n = 0),
                        (w.lexemesRe.lastIndex = 0),
                        (t = w.lexemesRe.exec(y));
                      for (; t; ) {
                        (a = a + d(y.substring(n, t.index))),
                          (e = r(w, t))
                            ? ((x = x + e[1]), (a = a + s(e[0], d(t[0]))))
                            : (a = a + d(t[0])),
                          (n = w.lexemesRe.lastIndex),
                          (t = w.lexemesRe.exec(y));
                      }
                      return a + d(y.substr(n));
                    })())),
                (y = '');
            }
            function g(e) {
              (v = v + (e.className ? s(e.className, '', !0) : '')),
                (w = Object.create(e, { parent: { value: w } }));
            }
            function m(e, n) {
              if (((y = y + e), n == null)) {
                return o(), 0;
              }
              const a = (function(e, n) {
                let t, a;
                for (t = 0, a = n.contains.length; t < a; t++) {
                  if (u(n.contains[t].beginRe, e)) {
                    return (
                      n.contains[t].endSameAsBegin &&
                        (n.contains[t].endRe =
                          ((i = n.contains[t].beginRe.exec(e)[0]),
                          new RegExp(
                            i.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'),
                            'm',
                          ))),
                      n.contains[t]
                    );
                  }
                }
                let i;
              })(n, w);
              if (a) {
                return (
                  a.skip
                    ? (y = y + n)
                    : (a.excludeBegin && (y = y + n),
                      o(),
                      a.returnBegin || a.excludeBegin || (y = n)),
                  g(a),
                  a.returnBegin ? 0 : n.length
                );
              }
              const i = (function e(n, t) {
                if (u(n.endRe, t)) {
                  for (; n.endsParent && n.parent; ) {
                    n = n.parent;
                  }
                  return n;
                }
                if (n.endsWithParent) {
                  return e(n.parent, t);
                }
              })(w, n);
              if (i) {
                const r = w;
                r.skip
                  ? (y = y + n)
                  : (r.returnEnd || r.excludeEnd || (y = y + n),
                    o(),
                    r.excludeEnd && (y = n));
                do {
                  w.className && (v = v + l),
                    w.skip || w.subLanguage || (x = x + w.relevance),
                    (w = w.parent);
                } while (w !== i.parent);
                return (
                  i.starts &&
                    (i.endSameAsBegin && (i.starts.endRe = i.endRe),
                    g(i.starts)),
                  r.returnEnd ? 0 : n.length
                );
              }
              if (
                (function(e, n) {
                  return !t && u(n.illegalRe, e);
                })(n, w)
              ) {
                throw new Error(
                  `Illegal lexeme "${n}" for mode "${w.className ||
                    '<unnamed>'}"`,
                );
              }
              return (y = y + n), n.length || 1;
            }
            var b = N(e);
            if (!b) {
              throw new Error(`Unknown language: "${e}"`);
            }
            p(b);
            let f;
            var w = i || b;
            var _ = {};
            var v = '';
            for (f = w; f !== b; f = f.parent) {
              f.className && (v = s(f.className, '', !0) + v);
            }
            var y = '';
            var x = 0;
            try {
              for (
                var M, O, S = 0;
                (w.terminators.lastIndex = S), (M = w.terminators.exec(n));

              ) {
                (O = m(n.substring(S, M.index), M[0])), (S = M.index + O);
              }
              for (m(n.substr(S)), f = w; f.parent; f = f.parent) {
                f.className && (v = v + l);
              }
              return { relevance: x, value: v, language: e, top: w };
            } catch (e) {
              if (e.message && e.message.indexOf('Illegal') !== -1) {
                return { relevance: 0, value: d(n) };
              }
              throw e;
            }
          }
          function E(e, n) {
            n = n || c.languages || t(a);
            let i = { relevance: 0, value: d(e) };
            let r = i;
            return (
              n
                .filter(N)
                .filter(y)
                .forEach((n) => {
                  const t = h(n, e, !1);
                  (t.language = n),
                    t.relevance > r.relevance && (r = t),
                    t.relevance > i.relevance && ((r = i), (i = t));
                }),
              r.language && (i.second_best = r),
              i
            );
          }
          function w(e) {
            return c.tabReplace || c.useBR
              ? e.replace(o, (e, n) =>
                  c.useBR && e === '\n'
                    ? '<br>'
                    : c.tabReplace
                    ? n.replace(/\t/g, c.tabReplace)
                    : '',
                )
              : e;
          }
          function _(e) {
            let t, a, r, o, l;
            const u = (function(e) {
              let n, t, a, i;
              let r = `${e.className} `;
              if (
                ((r = r + (e.parentNode ? e.parentNode.className : '')),
                (t = s.exec(r)))
              ) {
                return N(t[1]) ? t[1] : 'no-highlight';
              }
              for (r = r.split(/\s+/), n = 0, a = r.length; n < a; n++) {
                if (m((i = r[n])) || N(i)) {
                  return i;
                }
              }
            })(e);
            m(u) ||
              (c.useBR
                ? ((t = document.createElementNS(
                    'http://www.w3.org/1999/xhtml',
                    'div',
                  )).innerHTML = e.innerHTML
                    .replace(/\n/g, '')
                    .replace(/<br[ \/]*>/g, '\n'))
                : (t = e),
              (l = t.textContent),
              (r = u ? h(u, l, !0) : E(l)),
              (a = f(t)).length &&
                (((o = document.createElementNS(
                  'http://www.w3.org/1999/xhtml',
                  'div',
                )).innerHTML = r.value),
                (r.value = (function(e, t, a) {
                  let i = 0;
                  let r = '';
                  const s = [];
                  function o() {
                    return e.length && t.length
                      ? e[0].offset !== t[0].offset
                        ? e[0].offset < t[0].offset
                          ? e
                          : t
                        : t[0].event === 'start'
                        ? e
                        : t
                      : e.length
                      ? e
                      : t;
                  }
                  function l(e) {
                    r = `${r}<${g(e)}${n.map
                      .call(
                        e.attributes,
                        (e) =>
                          ` ${e.nodeName}="${d(e.value).replace(
                            '"',
                            '&quot;',
                          )}"`,
                      )
                      .join('')}>`;
                  }
                  function c(e) {
                    r = `${r}</${g(e)}>`;
                  }
                  function u(e) {
                    (e.event === 'start' ? l : c)(e.node);
                  }
                  for (; e.length || t.length; ) {
                    let m = o();
                    if (
                      ((r = r + d(a.substring(i, m[0].offset))),
                      (i = m[0].offset),
                      m === e)
                    ) {
                      s.reverse().forEach(c);
                      do {
                        u(m.splice(0, 1)[0]), (m = o());
                      } while (m === e && m.length && m[0].offset === i);
                      s.reverse().forEach(l);
                    } else {
                      m[0].event === 'start' ? s.push(m[0].node) : s.pop(),
                        u(m.splice(0, 1)[0]);
                    }
                  }
                  return r + d(a.substr(i));
                })(a, f(o), l))),
              (r.value = w(r.value)),
              (e.innerHTML = r.value),
              (e.className = (function(e, n, t) {
                const a = n ? i[n] : t;
                const r = [e.trim()];
                e.match(/\bhljs\b/) || r.push('hljs');
                e.indexOf(a) === -1 && r.push(a);
                return r.join(' ').trim();
              })(e.className, u, r.language)),
              (e.result = { language: r.language, re: r.relevance }),
              r.second_best &&
                (e.second_best = {
                  language: r.second_best.language,
                  re: r.second_best.relevance,
                }));
          }
          function v() {
            if (!v.called) {
              v.called = !0;
              const e = document.querySelectorAll('pre code');
              n.forEach.call(e, _);
            }
          }
          function N(e) {
            return (e = (e || '').toLowerCase()), a[e] || a[i[e]];
          }
          function y(e) {
            const n = N(e);
            return n && !n.disableAutodetect;
          }
          (e.highlight = h),
            (e.highlightAuto = E),
            (e.fixMarkup = w),
            (e.highlightBlock = _),
            (e.configure = function(e) {
              c = b(c, e);
            }),
            (e.initHighlighting = v),
            (e.initHighlightingOnLoad = function() {
              addEventListener('DOMContentLoaded', v, !1),
                addEventListener('load', v, !1);
            }),
            (e.registerLanguage = function(n, t) {
              const r = (a[n] = t(e));
              r.aliases &&
                r.aliases.forEach((e) => {
                  i[e] = n;
                });
            }),
            (e.listLanguages = function() {
              return t(a);
            }),
            (e.getLanguage = N),
            (e.autoDetection = y),
            (e.inherit = b),
            (e.IDENT_RE = '[a-zA-Z]\\w*'),
            (e.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*'),
            (e.NUMBER_RE = '\\b\\d+(\\.\\d+)?'),
            (e.C_NUMBER_RE =
              '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'),
            (e.BINARY_NUMBER_RE = '\\b(0b[01]+)'),
            (e.RE_STARTERS_RE =
              '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~'),
            (e.BACKSLASH_ESCAPE = { begin: '\\\\[\\s\\S]', relevance: 0 }),
            (e.APOS_STRING_MODE = {
              className: 'string',
              begin: "'",
              end: "'",
              illegal: '\\n',
              contains: [e.BACKSLASH_ESCAPE],
            }),
            (e.QUOTE_STRING_MODE = {
              className: 'string',
              begin: '"',
              end: '"',
              illegal: '\\n',
              contains: [e.BACKSLASH_ESCAPE],
            }),
            (e.PHRASAL_WORDS_MODE = {
              begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/,
            }),
            (e.COMMENT = function(n, t, a) {
              const i = e.inherit(
                { className: 'comment', begin: n, end: t, contains: [] },
                a || {},
              );
              return (
                i.contains.push(e.PHRASAL_WORDS_MODE),
                i.contains.push({
                  className: 'doctag',
                  begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
                  relevance: 0,
                }),
                i
              );
            }),
            (e.C_LINE_COMMENT_MODE = e.COMMENT('//', '$')),
            (e.C_BLOCK_COMMENT_MODE = e.COMMENT('/\\*', '\\*/')),
            (e.HASH_COMMENT_MODE = e.COMMENT('#', '$')),
            (e.NUMBER_MODE = {
              className: 'number',
              begin: e.NUMBER_RE,
              relevance: 0,
            }),
            (e.C_NUMBER_MODE = {
              className: 'number',
              begin: e.C_NUMBER_RE,
              relevance: 0,
            }),
            (e.BINARY_NUMBER_MODE = {
              className: 'number',
              begin: e.BINARY_NUMBER_RE,
              relevance: 0,
            }),
            (e.CSS_NUMBER_MODE = {
              className: 'number',
              begin: `${e.NUMBER_RE}(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?`,
              relevance: 0,
            }),
            (e.REGEXP_MODE = {
              className: 'regexp',
              begin: /\//,
              end: /\/[gimuy]*/,
              illegal: /\n/,
              contains: [
                e.BACKSLASH_ESCAPE,
                {
                  begin: /\[/,
                  end: /\]/,
                  relevance: 0,
                  contains: [e.BACKSLASH_ESCAPE],
                },
              ],
            }),
            (e.TITLE_MODE = {
              className: 'title',
              begin: e.IDENT_RE,
              relevance: 0,
            }),
            (e.UNDERSCORE_TITLE_MODE = {
              className: 'title',
              begin: e.UNDERSCORE_IDENT_RE,
              relevance: 0,
            }),
            (e.METHOD_GUARD = {
              begin: `\\.\\s*${e.UNDERSCORE_IDENT_RE}`,
              relevance: 0,
            }),
            e.registerLanguage('bash', (e) => {
              const n = {
                className: 'variable',
                variants: [
                  { begin: /\$[\w\d#@][\w\d_]*/ },
                  { begin: /\$\{(.*?)}/ },
                ],
              };
              const t = {
                className: 'string',
                begin: /"/,
                end: /"/,
                contains: [
                  e.BACKSLASH_ESCAPE,
                  n,
                  {
                    className: 'variable',
                    begin: /\$\(/,
                    end: /\)/,
                    contains: [e.BACKSLASH_ESCAPE],
                  },
                ],
              };
              return {
                aliases: ['sh', 'zsh'],
                lexemes: /\b-?[a-z\._]+\b/,
                keywords: {
                  keyword:
                    'if then else elif fi for while in do done case esac function',
                  literal: 'true false',
                  built_in:
                    'break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp',
                  _: '-ne -eq -lt -gt -f -d -e -s -l -a',
                },
                contains: [
                  {
                    className: 'meta',
                    begin: /^#![^\n]+sh\s*$/,
                    relevance: 10,
                  },
                  {
                    className: 'function',
                    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
                    returnBegin: !0,
                    contains: [
                      e.inherit(e.TITLE_MODE, { begin: /\w[\w\d_]*/ }),
                    ],
                    relevance: 0,
                  },
                  e.HASH_COMMENT_MODE,
                  t,
                  { className: 'string', begin: /'/, end: /'/ },
                  n,
                ],
              };
            }),
            e.registerLanguage('css', (e) => {
              const n = {
                begin: /[A-Z\_\.\-]+\s*:/,
                returnBegin: !0,
                end: ';',
                endsWithParent: !0,
                contains: [
                  {
                    className: 'attribute',
                    begin: /\S/,
                    end: ':',
                    excludeEnd: !0,
                    starts: {
                      endsWithParent: !0,
                      excludeEnd: !0,
                      contains: [
                        {
                          begin: /[\w-]+\(/,
                          returnBegin: !0,
                          contains: [
                            { className: 'built_in', begin: /[\w-]+/ },
                            {
                              begin: /\(/,
                              end: /\)/,
                              contains: [
                                e.APOS_STRING_MODE,
                                e.QUOTE_STRING_MODE,
                              ],
                            },
                          ],
                        },
                        e.CSS_NUMBER_MODE,
                        e.QUOTE_STRING_MODE,
                        e.APOS_STRING_MODE,
                        e.C_BLOCK_COMMENT_MODE,
                        { className: 'number', begin: '#[0-9A-Fa-f]+' },
                        { className: 'meta', begin: '!important' },
                      ],
                    },
                  },
                ],
              };
              return {
                case_insensitive: !0,
                illegal: /[=\/|'\$]/,
                contains: [
                  e.C_BLOCK_COMMENT_MODE,
                  { className: 'selector-id', begin: /#[A-Za-z0-9_-]+/ },
                  { className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/ },
                  {
                    className: 'selector-attr',
                    begin: /\[/,
                    end: /\]/,
                    illegal: '$',
                  },
                  {
                    className: 'selector-pseudo',
                    begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/,
                  },
                  {
                    begin: '@(font-face|page)',
                    lexemes: '[a-z-]+',
                    keywords: 'font-face page',
                  },
                  {
                    begin: '@',
                    end: '[{;]',
                    illegal: /:/,
                    contains: [
                      { className: 'keyword', begin: /\w+/ },
                      {
                        begin: /\s/,
                        endsWithParent: !0,
                        excludeEnd: !0,
                        relevance: 0,
                        contains: [
                          e.APOS_STRING_MODE,
                          e.QUOTE_STRING_MODE,
                          e.CSS_NUMBER_MODE,
                        ],
                      },
                    ],
                  },
                  {
                    className: 'selector-tag',
                    begin: '[a-zA-Z-][a-zA-Z0-9_-]*',
                    relevance: 0,
                  },
                  {
                    begin: '{',
                    end: '}',
                    illegal: /\S/,
                    contains: [e.C_BLOCK_COMMENT_MODE, n],
                  },
                ],
              };
            }),
            e.registerLanguage('xml', (e) => {
              const n = {
                endsWithParent: !0,
                illegal: /</,
                relevance: 0,
                contains: [
                  {
                    className: 'attr',
                    begin: '[A-Za-z0-9\\._:-]+',
                    relevance: 0,
                  },
                  {
                    begin: /[=]\s*/,
                    relevance: 0,
                    contains: [
                      {
                        className: 'string',
                        endsParent: !0,
                        variants: [
                          { begin: /"/, end: /"/ },
                          { begin: /'/, end: /'/ },
                          { begin: /[^\s"'=<>`]+/ },
                        ],
                      },
                    ],
                  },
                ],
              };
              return {
                aliases: [
                  'html',
                  'xhtml',
                  'rss',
                  'atom',
                  'xjb',
                  'xsd',
                  'xsl',
                  'plist',
                ],
                case_insensitive: !0,
                contains: [
                  {
                    className: 'meta',
                    begin: '<!DOCTYPE',
                    end: '>',
                    relevance: 10,
                    contains: [{ begin: '\\[', end: '\\]' }],
                  },
                  e.COMMENT('\x3c!--', '--\x3e', { relevance: 10 }),
                  { begin: '<\\!\\[CDATA\\[', end: '\\]\\]>', relevance: 10 },
                  {
                    className: 'meta',
                    begin: /<\?xml/,
                    end: /\?>/,
                    relevance: 10,
                  },
                  {
                    begin: /<\?(php)?/,
                    end: /\?>/,
                    subLanguage: 'php',
                    contains: [
                      { begin: '/\\*', end: '\\*/', skip: !0 },
                      { begin: 'b"', end: '"', skip: !0 },
                      { begin: "b'", end: "'", skip: !0 },
                      e.inherit(e.APOS_STRING_MODE, {
                        illegal: null,
                        className: null,
                        contains: null,
                        skip: !0,
                      }),
                      e.inherit(e.QUOTE_STRING_MODE, {
                        illegal: null,
                        className: null,
                        contains: null,
                        skip: !0,
                      }),
                    ],
                  },
                  {
                    className: 'tag',
                    begin: '<style(?=\\s|>|$)',
                    end: '>',
                    keywords: { name: 'style' },
                    contains: [n],
                    starts: {
                      end: '</style>',
                      returnEnd: !0,
                      subLanguage: ['css', 'xml'],
                    },
                  },
                  {
                    className: 'tag',
                    begin: '<script(?=\\s|>|$)',
                    end: '>',
                    keywords: { name: 'script' },
                    contains: [n],
                    starts: {
                      end: '</script>',
                      returnEnd: !0,
                      subLanguage: [
                        'actionscript',
                        'javascript',
                        'handlebars',
                        'xml',
                      ],
                    },
                  },
                  {
                    className: 'tag',
                    begin: '</?',
                    end: '/?>',
                    contains: [
                      { className: 'name', begin: /[^\/><\s]+/, relevance: 0 },
                      n,
                    ],
                  },
                ],
              };
            }),
            e.registerLanguage('django', (e) => {
              const n = {
                begin: /\|[A-Za-z]+:?/,
                keywords: {
                  name:
                    'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone',
                },
                contains: [e.QUOTE_STRING_MODE, e.APOS_STRING_MODE],
              };
              return {
                aliases: ['jinja'],
                case_insensitive: !0,
                subLanguage: 'xml',
                contains: [
                  e.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/),
                  e.COMMENT(/\{#/, /#}/),
                  {
                    className: 'template-tag',
                    begin: /\{%/,
                    end: /%}/,
                    contains: [
                      {
                        className: 'name',
                        begin: /\w+/,
                        keywords: {
                          name:
                            'comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim',
                        },
                        starts: {
                          endsWithParent: !0,
                          keywords: 'in by as',
                          contains: [n],
                          relevance: 0,
                        },
                      },
                    ],
                  },
                  {
                    className: 'template-variable',
                    begin: /\{\{/,
                    end: /}}/,
                    contains: [n],
                  },
                ],
              };
            }),
            e.registerLanguage('javascript', (e) => {
              const n = '[A-Za-z$_][0-9A-Za-z$_]*';
              const t = {
                keyword:
                  'in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as',
                literal: 'true false null undefined NaN Infinity',
                built_in:
                  'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise',
              };
              const a = {
                className: 'number',
                variants: [
                  { begin: '\\b(0[bB][01]+)' },
                  { begin: '\\b(0[oO][0-7]+)' },
                  { begin: e.C_NUMBER_RE },
                ],
                relevance: 0,
              };
              const i = {
                className: 'subst',
                begin: '\\$\\{',
                end: '\\}',
                keywords: t,
                contains: [],
              };
              const r = {
                className: 'string',
                begin: '`',
                end: '`',
                contains: [e.BACKSLASH_ESCAPE, i],
              };
              i.contains = [
                e.APOS_STRING_MODE,
                e.QUOTE_STRING_MODE,
                r,
                a,
                e.REGEXP_MODE,
              ];
              const s = i.contains.concat([
                e.C_BLOCK_COMMENT_MODE,
                e.C_LINE_COMMENT_MODE,
              ]);
              return {
                aliases: ['js', 'jsx'],
                keywords: t,
                contains: [
                  {
                    className: 'meta',
                    relevance: 10,
                    begin: /^\s*['"]use (strict|asm)['"]/,
                  },
                  { className: 'meta', begin: /^#!/, end: /$/ },
                  e.APOS_STRING_MODE,
                  e.QUOTE_STRING_MODE,
                  r,
                  e.C_LINE_COMMENT_MODE,
                  e.C_BLOCK_COMMENT_MODE,
                  a,
                  {
                    begin: /[{,]\s*/,
                    relevance: 0,
                    contains: [
                      {
                        begin: `${n}\\s*:`,
                        returnBegin: !0,
                        relevance: 0,
                        contains: [
                          { className: 'attr', begin: n, relevance: 0 },
                        ],
                      },
                    ],
                  },
                  {
                    begin: `(${e.RE_STARTERS_RE}|\\b(case|return|throw)\\b)\\s*`,
                    keywords: 'return throw case',
                    contains: [
                      e.C_LINE_COMMENT_MODE,
                      e.C_BLOCK_COMMENT_MODE,
                      e.REGEXP_MODE,
                      {
                        className: 'function',
                        begin: `(\\(.*?\\)|${n})\\s*=>`,
                        returnBegin: !0,
                        end: '\\s*=>',
                        contains: [
                          {
                            className: 'params',
                            variants: [
                              { begin: n },
                              { begin: /\(\s*\)/ },
                              {
                                begin: /\(/,
                                end: /\)/,
                                excludeBegin: !0,
                                excludeEnd: !0,
                                keywords: t,
                                contains: s,
                              },
                            ],
                          },
                        ],
                      },
                      {
                        begin: /</,
                        end: /(\/\w+|\w+\/)>/,
                        subLanguage: 'xml',
                        contains: [
                          { begin: /<\w+\s*\/>/, skip: !0 },
                          {
                            begin: /<\w+/,
                            end: /(\/\w+|\w+\/)>/,
                            skip: !0,
                            contains: [
                              { begin: /<\w+\s*\/>/, skip: !0 },
                              'self',
                            ],
                          },
                        ],
                      },
                    ],
                    relevance: 0,
                  },
                  {
                    className: 'function',
                    beginKeywords: 'function',
                    end: /\{/,
                    excludeEnd: !0,
                    contains: [
                      e.inherit(e.TITLE_MODE, { begin: n }),
                      {
                        className: 'params',
                        begin: /\(/,
                        end: /\)/,
                        excludeBegin: !0,
                        excludeEnd: !0,
                        contains: s,
                      },
                    ],
                    illegal: /\[|%/,
                  },
                  { begin: /\$[(.]/ },
                  e.METHOD_GUARD,
                  {
                    className: 'class',
                    beginKeywords: 'class',
                    end: /[{;=]/,
                    excludeEnd: !0,
                    illegal: /[:"\[\]]/,
                    contains: [
                      { beginKeywords: 'extends' },
                      e.UNDERSCORE_TITLE_MODE,
                    ],
                  },
                  { beginKeywords: 'constructor', end: /\{/, excludeEnd: !0 },
                ],
                illegal: /#(?!!)/,
              };
            }),
            e.registerLanguage('json', (e) => {
              const n = { literal: 'true false null' };
              const t = [e.QUOTE_STRING_MODE, e.C_NUMBER_MODE];
              const a = {
                end: ',',
                endsWithParent: !0,
                excludeEnd: !0,
                contains: t,
                keywords: n,
              };
              const i = {
                begin: '{',
                end: '}',
                contains: [
                  {
                    className: 'attr',
                    begin: /"/,
                    end: /"/,
                    contains: [e.BACKSLASH_ESCAPE],
                    illegal: '\\n',
                  },
                  e.inherit(a, { begin: /:/ }),
                ],
                illegal: '\\S',
              };
              const r = {
                begin: '\\[',
                end: '\\]',
                contains: [e.inherit(a)],
                illegal: '\\S',
              };
              return (
                t.splice(t.length, 0, i, r),
                { contains: t, keywords: n, illegal: '\\S' }
              );
            }),
            e.registerLanguage('markdown', (e) => ({
              aliases: ['md', 'mkdown', 'mkd'],
              contains: [
                {
                  className: 'section',
                  variants: [
                    { begin: '^#{1,6}', end: '$' },
                    { begin: '^.+?\\n[=-]{2,}$' },
                  ],
                },
                { begin: '<', end: '>', subLanguage: 'xml', relevance: 0 },
                { className: 'bullet', begin: '^([*+-]|(\\d+\\.))\\s+' },
                { className: 'strong', begin: '[*_]{2}.+?[*_]{2}' },
                {
                  className: 'emphasis',
                  variants: [
                    { begin: '\\*.+?\\*' },
                    { begin: '_.+?_', relevance: 0 },
                  ],
                },
                { className: 'quote', begin: '^>\\s+', end: '$' },
                {
                  className: 'code',
                  variants: [
                    { begin: '^```w*s*$', end: '^```s*$' },
                    { begin: '`.+?`' },
                    { begin: '^( {4}|\t)', end: '$', relevance: 0 },
                  ],
                },
                { begin: '^[-\\*]{3,}', end: '$' },
                {
                  begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
                  returnBegin: !0,
                  contains: [
                    {
                      className: 'string',
                      begin: '\\[',
                      end: '\\]',
                      excludeBegin: !0,
                      returnEnd: !0,
                      relevance: 0,
                    },
                    {
                      className: 'link',
                      begin: '\\]\\(',
                      end: '\\)',
                      excludeBegin: !0,
                      excludeEnd: !0,
                    },
                    {
                      className: 'symbol',
                      begin: '\\]\\[',
                      end: '\\]',
                      excludeBegin: !0,
                      excludeEnd: !0,
                    },
                  ],
                  relevance: 10,
                },
                {
                  begin: /^\[[^\n]+\]:/,
                  returnBegin: !0,
                  contains: [
                    {
                      className: 'symbol',
                      begin: /\[/,
                      end: /\]/,
                      excludeBegin: !0,
                      excludeEnd: !0,
                    },
                    {
                      className: 'link',
                      begin: /:\s*/,
                      end: /$/,
                      excludeBegin: !0,
                    },
                  ],
                },
              ],
            })),
            e.registerLanguage('ruby', (e) => {
              const n =
                '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
              const t = {
                keyword:
                  'and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
                literal: 'true false nil',
              };
              const a = { className: 'doctag', begin: '@[A-Za-z]+' };
              const i = { begin: '#<', end: '>' };
              const r = [
                e.COMMENT('#', '$', { contains: [a] }),
                e.COMMENT('^\\=begin', '^\\=end', {
                  contains: [a],
                  relevance: 10,
                }),
                e.COMMENT('^__END__', '\\n$'),
              ];
              const s = {
                className: 'subst',
                begin: '#\\{',
                end: '}',
                keywords: t,
              };
              const o = {
                className: 'string',
                contains: [e.BACKSLASH_ESCAPE, s],
                variants: [
                  { begin: /'/, end: /'/ },
                  { begin: /"/, end: /"/ },
                  { begin: /`/, end: /`/ },
                  { begin: '%[qQwWx]?\\(', end: '\\)' },
                  { begin: '%[qQwWx]?\\[', end: '\\]' },
                  { begin: '%[qQwWx]?{', end: '}' },
                  { begin: '%[qQwWx]?<', end: '>' },
                  { begin: '%[qQwWx]?/', end: '/' },
                  { begin: '%[qQwWx]?%', end: '%' },
                  { begin: '%[qQwWx]?-', end: '-' },
                  { begin: '%[qQwWx]?\\|', end: '\\|' },
                  {
                    begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/,
                  },
                  { begin: /<<(-?)\w+$/, end: /^\s*\w+$/ },
                ],
              };
              const l = {
                className: 'params',
                begin: '\\(',
                end: '\\)',
                endsParent: !0,
                keywords: t,
              };
              const c = [
                o,
                i,
                {
                  className: 'class',
                  beginKeywords: 'class module',
                  end: '$|;',
                  illegal: /[=]/,
                  contains: [
                    e.inherit(e.TITLE_MODE, {
                      begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?',
                    }),
                    {
                      begin: '<\\s*',
                      contains: [{ begin: `(${e.IDENT_RE}::)?${e.IDENT_RE}` }],
                    },
                  ].concat(r),
                },
                {
                  className: 'function',
                  beginKeywords: 'def',
                  end: '$|;',
                  contains: [e.inherit(e.TITLE_MODE, { begin: n }), l].concat(
                    r,
                  ),
                },
                { begin: `${e.IDENT_RE}::` },
                {
                  className: 'symbol',
                  begin: `${e.UNDERSCORE_IDENT_RE}(\\!|\\?)?:`,
                  relevance: 0,
                },
                {
                  className: 'symbol',
                  begin: ':(?!\\s)',
                  contains: [o, { begin: n }],
                  relevance: 0,
                },
                {
                  className: 'number',
                  begin:
                    '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
                  relevance: 0,
                },
                { begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' },
                { className: 'params', begin: /\|/, end: /\|/, keywords: t },
                {
                  begin: `(${e.RE_STARTERS_RE}|unless)\\s*`,
                  keywords: 'unless',
                  contains: [
                    i,
                    {
                      className: 'regexp',
                      contains: [e.BACKSLASH_ESCAPE, s],
                      illegal: /\n/,
                      variants: [
                        { begin: '/', end: '/[a-z]*' },
                        { begin: '%r{', end: '}[a-z]*' },
                        { begin: '%r\\(', end: '\\)[a-z]*' },
                        { begin: '%r!', end: '![a-z]*' },
                        { begin: '%r\\[', end: '\\][a-z]*' },
                      ],
                    },
                  ].concat(r),
                  relevance: 0,
                },
              ].concat(r);
              (s.contains = c), (l.contains = c);
              const d = [
                { begin: /^\s*=>/, starts: { end: '$', contains: c } },
                {
                  className: 'meta',
                  begin:
                    '^([>?]>|[\\w#]+\\(\\w+\\):\\d+:\\d+>|(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>)',
                  starts: { end: '$', contains: c },
                },
              ];
              return {
                aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
                keywords: t,
                illegal: /\/\*/,
                contains: r.concat(d).concat(c),
              };
            }),
            e.registerLanguage('scss', (e) => {
              const n = {
                className: 'variable',
                begin: '(\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\b',
              };
              const t = { className: 'number', begin: '#[0-9A-Fa-f]+' };
              return (
                e.CSS_NUMBER_MODE,
                e.QUOTE_STRING_MODE,
                e.APOS_STRING_MODE,
                e.C_BLOCK_COMMENT_MODE,
                {
                  case_insensitive: !0,
                  illegal: "[=/|']",
                  contains: [
                    e.C_LINE_COMMENT_MODE,
                    e.C_BLOCK_COMMENT_MODE,
                    {
                      className: 'selector-id',
                      begin: '\\#[A-Za-z0-9_-]+',
                      relevance: 0,
                    },
                    {
                      className: 'selector-class',
                      begin: '\\.[A-Za-z0-9_-]+',
                      relevance: 0,
                    },
                    {
                      className: 'selector-attr',
                      begin: '\\[',
                      end: '\\]',
                      illegal: '$',
                    },
                    {
                      className: 'selector-tag',
                      begin:
                        '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
                      relevance: 0,
                    },
                    {
                      begin:
                        ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)',
                    },
                    {
                      begin:
                        '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)',
                    },
                    n,
                    {
                      className: 'attribute',
                      begin:
                        '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
                      illegal: '[^\\s]',
                    },
                    {
                      begin:
                        '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b',
                    },
                    {
                      begin: ':',
                      end: ';',
                      contains: [
                        n,
                        t,
                        e.CSS_NUMBER_MODE,
                        e.QUOTE_STRING_MODE,
                        e.APOS_STRING_MODE,
                        { className: 'meta', begin: '!important' },
                      ],
                    },
                    {
                      begin: '@',
                      end: '[{;]',
                      keywords:
                        'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
                      contains: [
                        n,
                        e.QUOTE_STRING_MODE,
                        e.APOS_STRING_MODE,
                        t,
                        e.CSS_NUMBER_MODE,
                        { begin: '\\s[A-Za-z0-9_.-]+', relevance: 0 },
                      ],
                    },
                  ],
                }
              );
            }),
            e.registerLanguage('shell', (e) => ({
              aliases: ['console'],
              contains: [
                {
                  className: 'meta',
                  begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
                  starts: { end: '$', subLanguage: 'bash' },
                },
              ],
            })),
            e.registerLanguage('yaml', (e) => {
              const n = '[a-zA-Z_][\\w\\-]*';
              const t = {
                className: 'attr',
                variants: [
                  { begin: `^[ \\-]*${n}:` },
                  { begin: `^[ \\-]*"${n}":` },
                  { begin: `^[ \\-]*'${n}':` },
                ],
              };
              const a = {
                className: 'string',
                relevance: 0,
                variants: [
                  { begin: /'/, end: /'/ },
                  { begin: /"/, end: /"/ },
                  { begin: /\S+/ },
                ],
                contains: [
                  e.BACKSLASH_ESCAPE,
                  {
                    className: 'template-variable',
                    variants: [
                      { begin: '{{', end: '}}' },
                      { begin: '%{', end: '}' },
                    ],
                  },
                ],
              };
              return {
                case_insensitive: !0,
                aliases: ['yml', 'YAML', 'yaml'],
                contains: [
                  t,
                  { className: 'meta', begin: '^---s*$', relevance: 10 },
                  {
                    className: 'string',
                    begin: '[\\|>] *$',
                    returnEnd: !0,
                    contains: a.contains,
                    end: t.variants[0].begin,
                  },
                  {
                    begin: '<%[%=-]?',
                    end: '[%-]?%>',
                    subLanguage: 'ruby',
                    excludeBegin: !0,
                    excludeEnd: !0,
                    relevance: 0,
                  },
                  { className: 'type', begin: `!${e.UNDERSCORE_IDENT_RE}` },
                  { className: 'type', begin: `!!${e.UNDERSCORE_IDENT_RE}` },
                  {
                    className: 'meta',
                    begin: `&${e.UNDERSCORE_IDENT_RE}$`,
                  },
                  {
                    className: 'meta',
                    begin: `\\*${e.UNDERSCORE_IDENT_RE}$`,
                  },
                  { className: 'bullet', begin: '^ *-', relevance: 0 },
                  e.HASH_COMMENT_MODE,
                  {
                    beginKeywords: 'true false yes no null',
                    keywords: { literal: 'true false yes no null' },
                  },
                  e.C_NUMBER_MODE,
                  a,
                ],
              };
            });
        })(n);
      })();
    },
    dYcP(e, n) {
      /* ! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. MIT license */
      !(function() {
        if (window.matchMedia && window.matchMedia('all').addListener) {
          return !1;
        }
        const e = window.matchMedia;
        const n = e('only all').matches;
        let t = !1;
        let a = 0;
        const i = [];
        const r = function(n) {
          clearTimeout(a),
            (a = setTimeout(() => {
              for (let n = 0, t = i.length; n < t; n++) {
                const a = i[n].mql;
                const r = i[n].listeners || [];
                const s = e(a.media).matches;
                if (s !== a.matches) {
                  a.matches = s;
                  for (let o = 0, l = r.length; o < l; o++) {
                    r[o].call(window, a);
                  }
                }
              }
            }, 30));
        };
        window.matchMedia = function(a) {
          const s = e(a);
          const o = [];
          let l = 0;
          return (
            (s.addListener = function(e) {
              n &&
                (t || ((t = !0), window.addEventListener('resize', r, !0)),
                l === 0 && (l = i.push({ mql: s, listeners: o })),
                o.push(e));
            }),
            (s.removeListener = function(e) {
              for (let n = 0, t = o.length; n < t; n++) {
                o[n] === e && o.splice(n, 1);
              }
            }),
            s
          );
        };
      })();
    },
    kzB7(e, n) {
      e.exports = {
        colors: {
          'brand-colors': {
            'brand-orange': '#c75000',
            'brand-blue': '#0d7fa5',
            'brand-pink': '#aa0e5c',
          },
          'neutral-colors': {
            'light-gray': '#dedede',
            gray: '#555b5e',
            'contrast-light': '#fff',
            'contrast-dark': '#3b4042',
          },
          'theme-colors': {
            'theme-dark': '#0d7fa5',
            'theme-light': '#cfe5ed',
            background: '#fff',
            text: '#3b4042',
            'text-light': '#555b5e',
            action: '#b91e6c',
            focus: '#0d7fa5',
            underline: '#eec7da',
            border: '#555b5e',
            'border-light': '#dedede',
            shadow: 'rgba(85, 91, 94, 0.5)',
            callout: '#cfe5ed',
            slight: '#fafcfd',
            code: '#0d7fa5',
            'code-shadow': 'rgba(13, 127, 165, 0.2)',
          },
          'hljs-colors': {
            'hljs-comment': '#93a1a1',
            'hljs-green': '#859900',
            'hljs-cyan': '#2aa198',
            'hljs-blue': '#268bd2',
            'hljs-yellow': '#b58900',
            'hljs-orange': '#cb4b16',
            'hljs-red': '#dc322f',
            'hljs-formula': '#eee8d5',
          },
          'demo-colors': { 'brand-blue': '#0d7fa5', 'brand-pink': '#e2127a' },
          'demo-noncolors': {
            'light-gray': '#dedede',
            gray: '#555b5e',
            'contrast-dark': '#3b4042',
          },
        },
        ratios: {
          'text-ratios': { 'line-height': 1.4 },
          'demo-ratios': { 'line-height': 1.4 },
        },
        sizes: {
          'root-sizes': {
            root: '18px',
            responsive: 'calc(1em + 0.125vw)',
            large: 'calc(1rem + 0.5vw)',
            small: '0.9rem',
          },
          'text-sizes': {
            reset: '1rem',
            h1: 'calc(1rem + 2vw)',
            h2: 'calc(1rem + 1vw)',
            h3: 'calc(1rem + 0.5vw)',
            quote: 'calc(1rem + 0.5vw)',
            code: '0.9rem',
            footer: '0.9rem',
            search: '0.9rem',
          },
          'spacing-sizes': {
            rhythm: '1.4rem',
            gutter: '1.4rem',
            'gutter-plus': '2.1rem',
            'double-gutter': '2.8rem',
            'flex-gutter': 'calc(0.7rem + 2.5vw)',
            spacer: 'calc(4.2rem + 2.5vw)',
            'gutter-minus': '1.05rem',
            shim: '0.7rem',
            'half-shim': '0.35rem',
            'quarter-shim': '0.175rem',
          },
          'pattern-sizes': {
            'nav-underline': '4px',
            'nav-icon': '28px',
            'arrow-border': '8px',
            'arrow-depth': '0.7rem',
            'arrow-side': '1.4rem',
            'font-preview': '24em',
            'specimen-aa': '4.2rem',
            'color-preview': '16em',
            'color-swatch': '5.6rem',
            'footer-logo': '2.8rem',
          },
          'layout-sizes': {
            page: '50rem',
            'item-break': '40em',
            'page-break': '50em',
            'nav-break': '65em',
          },
          'demo-sizes': { root: '18px', xlarge: '3rem' },
        },
        fonts: {
          sans: {
            name: 'Source Sans Pro',
            source: 'https://fonts.google.com/specimen/Source+Sans+Pro',
            stack: [
              'Source Sans Pro',
              'Helvetica Neue',
              'Helvetica',
              'Arial',
              'sans-serif',
            ],
          },
          code: {
            name: 'Source Code Pro',
            source: 'https://fonts.google.com/specimen/Source+Code+Pro',
            stack: [
              'Source Code Pro',
              'Consolas',
              'Menlo',
              'Monaco',
              'Lucida Console',
              'Liberation Mono',
              'DejaVu Sans Mono',
              'Bitstream Vera Sans Mono',
              'Courier New',
              'monospace',
              'sans-serif',
            ],
          },
          'demo-cdn': {
            name: 'Source Code Pro',
            source: 'https://fonts.google.com/specimen/Source+Code+Pro',
            stack: [
              'Consolas',
              'Menlo',
              'Courier New',
              'monospace',
              'sans-serif',
            ],
          },
          'demo-local': {
            name: 'rockingham',
            normal: {
              path: 'rockingham/rockingham-regular-webfont',
              local: 'rockingham-regular-webfont',
            },
            bold: 'rockingham/rockingham-bold-webfont',
            italic: 'rockingham/rockingham-italic-webfont',
            'bold italic': 'rockingham/rockingham-bolditalic-webfont',
            stack: 'fantasy',
            formats: ['woff2', 'woff', 'ttf'],
          },
        },
      };
    },
    t3mS(e, n, t) {
      'use strict';
      (function(e) {
        t.d(n, 'c', () => r), t.d(n, 'a', () => s), t.d(n, 'b', () => o);
        const a = t('kzB7');
        const i = t.n(a);
        var r = function() {
          const n = e('body');
          n.on('toggle:close', '[data-toggle="button"]', function() {
            const n = e(this).attr('aria-controls');
            const t = e('[data-target-id="'.concat(n, '"]'));
            e(
              '[data-toggle="button"][aria-controls="'.concat(
                n,
                '"][aria-pressed="true"]',
              ),
            ).attr('aria-pressed', 'false'),
              t.trigger('target:close');
          }),
            n.on('toggle:open', '[data-toggle="button"]', function() {
              const n = e(this);
              const t = n.attr('aria-controls');
              const a = e('[data-target-id="'.concat(t, '"]'));
              const i = e(
                '[data-toggle="button"][aria-controls="'.concat(t, '"]'),
              ).not(n);
              n.data('toggle-synced')
                ? i
                    .filter('[data-toggle-synced="true"]')
                    .attr('aria-pressed', 'true')
                : i
                    .filter('[aria-pressed="true"]')
                    .attr('aria-pressed', 'false'),
                n.attr('aria-pressed', 'true'),
                a.trigger('target:open');
            }),
            n.on('target:close', '[data-toggle="target"]', function(n) {
              const t = e(this);
              e(n.target).is(t) && t.attr('aria-expanded', 'false');
            });
          const t = function(n) {
            const t = n.attr('data-target-id');
            const a = e(
              '[data-toggle="button"][aria-controls="'.concat(
                t,
                '"][aria-pressed="true"]',
              ),
            );
            a.length ? a.trigger('toggle:close') : n.trigger('target:close');
          };
          n.on('target:open', '[data-toggle="target"]', function(n) {
            const t = e(this);
            e(n.target).is(t) && t.attr('aria-expanded', 'true');
          }),
            n.on('click', '[data-toggle="button"]', function(n) {
              n.preventDefault();
              const t = e(this);
              t.attr('aria-pressed') === 'true'
                ? t.trigger('toggle:close')
                : t.trigger('toggle:open');
            }),
            n.on('click', '[data-toggle="close"]', function(n) {
              n.preventDefault();
              const a = e(
                '[data-target-id="'.concat(e(this).attr('aria-controls'), '"]'),
              );
              t(a);
            });
          n.on('click', (n) => {
            e(
              '[data-toggle="target"][aria-expanded="true"][data-auto-closing="true"]',
            ).each((a, i) => {
              !(function(e, n) {
                const a = n.attr('data-target-id');
                const i = e.closest('[aria-controls="'.concat(a, '"]')).length;
                const r = document.contains(e.get(0));
                const s = !e.closest(n).length;
                const o = n.attr('data-auto-closing-exception');
                const l = Boolean(o) && e.closest(o).length;
                !i &&
                  (n.data('auto-closing-on-any-click') || (r && s && !l)) &&
                  t(n);
              })(e(n.target), e(i));
            });
          });
        };
        var s = function() {
          const n = function(n) {
            n.contentWindow.document.body &&
              (n.height = e(n.contentWindow.document).outerHeight(!0));
          };
          const t = function() {
            e('iframe').each(function() {
              n(this);
            });
          };
          t(),
            e('iframe').on('load', function() {
              n(this);
            }),
            e(window).on('resize', t);
        };
        var o = function() {
          const n =
            i.a &&
            i.a.sizes &&
            i.a.sizes['layout-sizes'] &&
            i.a.sizes['layout-sizes']['nav-break'];
          if (n) {
            const t = e('#nav');
            const a = e('[aria-controls="nav"]');
            const r = window.matchMedia('(min-width: '.concat(n, ')'));
            const s = function(e) {
              e.matches
                ? t.attr('aria-expanded', 'true')
                : t.attr('aria-expanded', a.attr('aria-pressed'));
            };
            s(r), r.addListener(s);
          }
        };
      }.call(this, t('26+0')));
    },
  },
  [['+3Jt', 0, 1]],
]);
