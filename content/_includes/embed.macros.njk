{% import 'utility.macros.njk' as utility %}

{# @docs
label: Media Embed macros
category: File
note: |
  Helper macros for consistent embeding of
  images, svg, video (iframes), and audio media --
  as welll as creating particular patterns
  like media/icon-blocks, logo arrays, figures, galleries, etc.
#}


{# @docs
label: media_block
category: Patterns
note: |
  Media blocks create a side-by-side layout,
  with constrained-width media on one side,
  and text-content flowing to the other side.
params:
  media:
    type: string
    note: The media to embed (this macro does not generate the media itself)
  name:
    type: string
    default: "''"
    note: This name will be applied to the `data-media` attribute
  attrs:
    type: dictionary
    default: '{}'
  reverse:
    type: boolean
    default: 'false'
  content:
    type: string
    default: none
    note: Provide either the content parameter *or* a `caller()` block
#}
{% macro media_block(
  media,
  name='',
  attrs={},
  reverse=false,
  content=none
) %}
{%- set content = content if (content != none) else caller() -%}
<div data-media="{{ name }}" {{ utility.attr_if('data-reverse', reverse) }} {{ utility.show_attrs(attrs) }}>
<div class="media-image">{{ media | safe }}</div>
<div class="media-content">{{ content | safe }}</div>
</div>
{% endmacro %}


{# @docs
label: figure
category: Patterns
note: |
  Generate a figure from data, or pass in a `caller()` block.
params:
  data:
    type: array
    default: none
    note: Array of media-data dictionaries
  caption:
    type: string
    default: none
#}
{% macro figure(
  data=none,
  caption=none
) -%}
{%- set content = _fig_content(data) if (data != none) else caller() -%}
{% if content %}
<figure>
<div class="fig-content">
{{- content | safe -}}
</div>
{%- if caption -%}
<figcaption>
{{- caption | mdInline | safe -}}
</figcaption>
{%- endif -%}
</figure>
{% endif %}
{%- endmacro %}


{# Private macro used to generate figure content from data #}
{% macro _fig_content(
  data
) -%}
{%- for item in data -%}
  {%- if item.img -%}
    {%- set style = {
      '--width': item.width,
      '--span': item.span
    } | styles -%}
    {{- img(item.img, item.alt, {'style': style}) | safe -}}
  {%- elif item.iframe -%}
    {{- iframe(item.iframe, item.width, item.height, item.span) -}}
  {%- elif item.audio -%}
    {{- audio(item.audio, span) -}}
  {%- endif -%}
{%- endfor -%}
{%- endmacro %}


{# @docs
label: screen
category: Patterns
note: Place an image inside a screen, like an iphone.
params:
  device:
    type: string
    note: Name of an icon in `_includes/devices/`
  fill:
    type: color
    default: 'none'
    note: Color to use in any extra space around the image
  content:
    type: html
    default: none
    note: The image to embed (can also be passed into a `caller()` block)
#}
{% macro screen(
  device='iphone',
  fill=none,
  content=none
) %}
{%- set content = content if (content != none) else caller() -%}
{%- set style = {'--device-fill': fill} -%}
<div data-screen="{{ device }}" {{ utility.style_if(style) }}>
{{ content | safe }}
{% include 'devices/' + device + '.svg' %}
</div>
{% endmacro %}


{# @docs
label: logos
category: Patterns
note: Generate a block of project logos.
todo: This is likely to move and expand to include page data.
params:
  projects:
    type: array
    note: |
      Names of svg files to include from `content/_includes/logos/`,
      without the path or `.svg` extension.
#}
{% macro logos(
  projects
) %}
<div class="logo-grid">
  {%- for project in projects -%}
    {{- svg('logos/' + project) | safe -}}
  {%- endfor -%}
</div>
{% endmacro %}


{# @docs
label: icon_block
category: Patterns
note: Generate a series of media-blocks with icons
params:
  data:
    type: array
    note: |
      Each dictionary in the array should include an `icon` and `text`,
      with optional `title` and `url`.
  title:
    type: string
    default: 'none'
    note: The overall title for the icon-blocks section.
#}
{% macro icon_block(
  data,
  title=none
) -%}
{%- if data -%}
<section class="icon-blocks">
{%- if title %}<h2>{{ title | mdInline | safe }}</h2>{% endif -%}
{%- for item in data -%}
{%- call media_block(
  media=utility.link_if(svg(item.icon), item.url),
  name='icon-block'
) -%}
{%- if item.title -%}
<h3>{{ utility.link_if(item.title, item.url) }}</h3>
{%- endif -%}
{{ item.text | md | safe }}
{%- endcall -%}
{%- endfor -%}
</section>
{%- endif -%}
{%- endmacro %}


{# @docs
label: img
category: Embed
note: Embed an image
params:
  src:
    type: url
  alt:
    type: string
    default: ''
  attrs:
    type: dictionary
    default: '{}'
#}
{% macro img(
  src,
  alt='',
  attrs={}
) -%}
{%- if src -%}
{%- set src = src if ('://' in src) else ('/assets/images/' + src) -%}
{%- set main = {
  'src': src,
  'alt': alt
} -%}
<img {{ utility.show_attrs(main) }} {{ utility.show_attrs(attrs) }}/>
{%- endif -%}
{%- endmacro %}


{# @docs
label: svg
category: Embed
note: Embed an svg file from the `content/_includes/` folder
params:
  path:
    type: string
#}
{% macro svg(
  path
) -%}
  {%- include path + '.svg' -%}
{%- endmacro %}


{# @docs
label: iframe
category: Embed
note: |
  Embed an iframe (most often used for videos).
  Width and height are provided both as defaults,
  and to create intrinsic ratios when possible.
params:
  src:
    type: url
  width:
    type: number
    default: 'none'
  height:
    type: number
    default: 'none'
  span:
    type: number | 'full'
    default: 'none'
    note: Span multiple columns of a gallery
#}
{% macro iframe(
  src,
  width=none,
  height=none,
  span=none
) %}
  {%- set attrs = {
    'src': src,
    'width': width,
    'height': height,
    'frameborder': '0',
    'webkitallowfullscreen': true,
    'mozallowfullscreen': true,
    'allowfullscreen': true
  } -%}
  {%- set content %}<iframe {{ utility.show_attrs(attrs) }}></iframe>{% endset -%}
  {{- ratio(width, height, span, content) | safe -}}
{% endmacro %}

{# @docs
label: audio
category: Embed
note: Embed an audio file
params:
  src:
    type: url
  attrs:
    type: dictionary
    default: '{}'
#}
{% macro audio(
  src,
  span
) -%}
{%- set style = {
  '--width': '100%',
  '--span': span
} -%}
<audio src="{{ src }}" {{ utility.style_if(style) }} controls>{{ src | mdInline }}</audio>
{%- endmacro %}


{# @docs
label: ratio
category: Layout
note: Maintain aspect ratio for embedded media
params:
  width:
    type: number
    default: 'none'
  height:
    type: number
    default: 'none'
  span:
    type: number | 'full'
    default: 'none'
    note: Span multiple columns of a gallery
  content:
    type: html
    default: 'none'
    note: The content to embed (can also be a `caller()` block)
#}
{% macro ratio(
  width=none,
  height=none,
  span=none,
  content=none
) %}
{%- set content = content if (content != none) else caller() -%}
{%- if width | typeCheck('number') and height | typeCheck('number') -%}
  {%- set style = {
    '--ratio': (width / height),
    '--span': span
  } -%}
<div class="ratio" {{ utility.style_if(style) }}\>{{ content | safe }}</div>
  {%- else -%}
    {{- content | safe -}}
  {%- endif -%}
{%- endmacro %}
